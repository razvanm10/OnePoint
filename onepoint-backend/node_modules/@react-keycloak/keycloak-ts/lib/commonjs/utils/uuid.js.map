{"version":3,"sources":["uuid.ts"],"names":["generateRandomString","len","alphabet","randomData","generateRandomData","chars","Array","map","_","idx","charCodeAt","length","String","fromCharCode","apply","Math","floor","random","generateCodeVerifier","hexDigits","createUUID","s","split","substr","join","generatePkceChallenge","pkceMethod","codeVerifier","hashBytes","Uint8Array","sha256","arrayBuffer","encodedHash","replace"],"mappings":";;;;;;;;;AACA;;AACA;;AAFA;AAIA,SAASA,oBAAT,CAA8BC,GAA9B,EAA2CC,QAA3C,EAA6D;AAC3D,QAAMC,UAAU,GAAGC,kBAAkB,CAACH,GAAD,CAArC;AAEA,QAAMI,KAAK,GAAG,CAAC,GAAGC,KAAK,CAACL,GAAD,CAAT,EAAgBM,GAAhB,CAAoB,CAACC,CAAD,EAAIC,GAAJ,KAChCP,QAAQ,CAACQ,UAAT,CAAoBP,UAAU,CAACM,GAAD,CAAV,GAAkBP,QAAQ,CAACS,MAA/C,CADY,CAAd;AAIA,SAAOC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCT,KAAhC,CAAP;AACD;;AAED,SAASD,kBAAT,CAA4BH,GAA5B,EAAmD;AACjD,SAAO,CAAC,GAAGK,KAAK,CAACL,GAAD,CAAT,EAAgBM,GAAhB,CAAoB,MAAMQ,IAAI,CAACC,KAAL,CAAW,MAAMD,IAAI,CAACE,MAAL,EAAjB,CAA1B,CAAP;AACD;;AAEM,SAASC,oBAAT,CAA8BjB,GAA9B,EAA2C;AAChD,SAAOD,oBAAoB,CACzBC,GADyB,EAEzB,gEAFyB,CAA3B;AAID;;AAED,MAAMkB,SAAS,GAAG,kBAAlB;;AAEO,SAASC,UAAT,GAA8B;AACnC,QAAMC,CAAC,GAAGrB,oBAAoB,CAAC,EAAD,EAAKmB,SAAL,CAApB,CAAoCG,KAApC,CAA0C,EAA1C,CAAV;AAEAD,EAAAA,CAAC,CAAC,EAAD,CAAD,GAAQ,GAAR,CAHmC,CAInC;;AACAA,EAAAA,CAAC,CAAC,EAAD,CAAD,GAAQF,SAAS,CAACI,MAAV,CAAmBF,CAAC,CAAC,EAAD,CAAF,GAAiB,GAAlB,GAAyB,GAA1C,EAA+C,CAA/C,CAAR;AACAA,EAAAA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,EAAD,CAAD,GAAQA,CAAC,CAAC,EAAD,CAAD,GAAQA,CAAC,CAAC,EAAD,CAAD,GAAQ,GAA/B;AAEA,SAAOA,CAAC,CAACG,IAAF,CAAO,EAAP,CAAP;AACD;;AAEM,SAASC,qBAAT,CACLC,UADK,EAELC,YAFK,EAGL;AACA,UAAQD,UAAR;AACE;AACA,SAAK,MAAL;AACE;AACA,YAAME,SAAS,GAAG,IAAIC,UAAJ,CAAeC,cAAOC,WAAP,CAAmBJ,YAAnB,CAAf,CAAlB;AACA,YAAMK,WAAW,GAAG,6BAAcJ,SAAd,EACjBK,OADiB,CACT,KADS,EACF,GADE,EAEjBA,OAFiB,CAET,KAFS,EAEF,GAFE,EAGjBA,OAHiB,CAGT,KAHS,EAGF,EAHE,CAApB;AAIA,aAAOD,WAAP;;AAEF;AACE,YAAM,8BAAN;AAZJ;AAcD","sourcesContent":["/* eslint-disable no-useless-escape */\nimport { fromByteArray } from 'base64-js';\nimport { sha256 } from 'js-sha256';\n\nfunction generateRandomString(len: number, alphabet: string) {\n  const randomData = generateRandomData(len);\n\n  const chars = [...Array(len)].map((_, idx) =>\n    alphabet.charCodeAt(randomData[idx] % alphabet.length)\n  );\n\n  return String.fromCharCode.apply(null, chars);\n}\n\nfunction generateRandomData(len: number): number[] {\n  return [...Array(len)].map(() => Math.floor(256 * Math.random()));\n}\n\nexport function generateCodeVerifier(len: number) {\n  return generateRandomString(\n    len,\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  );\n}\n\nconst hexDigits = '0123456789abcdef';\n\nexport function createUUID(): string {\n  const s = generateRandomString(36, hexDigits).split('');\n\n  s[14] = '4';\n  // eslint-disable-next-line no-bitwise\n  s[19] = hexDigits.substr(((s[19] as any) & 0x3) | 0x8, 1);\n  s[8] = s[13] = s[18] = s[23] = '-';\n\n  return s.join('');\n}\n\nexport function generatePkceChallenge(\n  pkceMethod: string,\n  codeVerifier: string\n) {\n  switch (pkceMethod) {\n    // The use of the \"plain\" method is considered insecure and therefore not supported.\n    case 'S256':\n      // hash codeVerifier, then encode as url-safe base64 without padding\n      const hashBytes = new Uint8Array(sha256.arrayBuffer(codeVerifier));\n      const encodedHash = fromByteArray(hashBytes)\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/\\=/g, '');\n      return encodedHash;\n\n    default:\n      throw 'Invalid value for pkceMethod';\n  }\n}\n"]}