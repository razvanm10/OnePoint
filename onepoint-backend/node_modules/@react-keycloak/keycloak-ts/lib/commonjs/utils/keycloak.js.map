{"version":3,"sources":["keycloak.ts"],"names":["fromEntries","iterable","reduce","obj","key","val","getRealmUrl","realm","authServerUrl","undefined","charAt","length","encodeURIComponent","setupOidcEndoints","oidcConfiguration","Error","authorize","token","logout","register","userinfo","authorization_endpoint","token_endpoint","end_session_endpoint","userinfo_endpoint","decodeToken","str","parseCallbackParams","paramsString","supportedParams","params","otherParams","oAuthParams","Object","keys","oParams","oauthParams","includes","set","Map","entries","isKeycloakConfig","config"],"mappings":"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","sourcesContent":["import jwtDecode from 'jwt-decode';\n\nimport type {\n  CallbackStorage,\n  KeycloakConfig,\n  KeycloakInitOptions,\n  OIDCProviderConfig,\n} from '../types';\n\nimport {\n  extractQuerystringParameters,\n  formatQuerystringParameters,\n} from './url';\n\nfunction fromEntries<T>(iterable: IterableIterator<[string, T]>): {\n  [key: string]: T;\n} {\n  return [...iterable].reduce<{ [key: string]: T }>(\n    (obj, [key, val]) => ({\n      ...obj,\n      [key]: val,\n    }),\n    {}\n  );\n}\n\nexport function getRealmUrl(realm: string, authServerUrl?: string) {\n  if (typeof authServerUrl === 'undefined') {\n    return undefined;\n  }\n\n  if (authServerUrl.charAt(authServerUrl.length - 1) === '/') {\n    return authServerUrl + 'realms/' + encodeURIComponent(realm);\n  } else {\n    return authServerUrl + '/realms/' + encodeURIComponent(realm);\n  }\n}\n\nexport function setupOidcEndoints({\n  oidcConfiguration,\n  realm,\n  authServerUrl,\n}: {\n  realm?: string;\n  authServerUrl?: string;\n  oidcConfiguration?: OIDCProviderConfig;\n}) {\n  if (!oidcConfiguration) {\n    if (!realm) {\n      throw new Error('Missing realm');\n    }\n\n    return {\n      authorize: function () {\n        return (\n          getRealmUrl(realm, authServerUrl) + '/protocol/openid-connect/auth'\n        );\n      },\n      token: function () {\n        return (\n          getRealmUrl(realm, authServerUrl) + '/protocol/openid-connect/token'\n        );\n      },\n      logout: function () {\n        return (\n          getRealmUrl(realm, authServerUrl) + '/protocol/openid-connect/logout'\n        );\n      },\n      register: function () {\n        return (\n          getRealmUrl(realm, authServerUrl) +\n          '/protocol/openid-connect/registrations'\n        );\n      },\n      userinfo: function () {\n        return (\n          getRealmUrl(realm, authServerUrl) +\n          '/protocol/openid-connect/userinfo'\n        );\n      },\n    };\n  }\n\n  return {\n    authorize: function () {\n      return oidcConfiguration.authorization_endpoint as string;\n    },\n    token: function () {\n      return oidcConfiguration.token_endpoint as string;\n    },\n    logout: function () {\n      if (!oidcConfiguration.end_session_endpoint) {\n        throw 'Not supported by the OIDC server';\n      }\n      return oidcConfiguration.end_session_endpoint as string;\n    },\n    register: function () {\n      throw 'Redirection to \"Register user\" page not supported in standard OIDC mode';\n    },\n    userinfo: function () {\n      if (!oidcConfiguration.userinfo_endpoint) {\n        throw 'Not supported by the OIDC server';\n      }\n      return oidcConfiguration.userinfo_endpoint as string;\n    },\n  };\n}\n\nexport function decodeToken<T = unknown>(str: string) {\n  return jwtDecode<T>(str);\n}\n\nexport interface ParseCallbackParams {\n  callbackStorage: CallbackStorage;\n\n  clientOptions: KeycloakInitOptions;\n\n  url: string;\n}\n\nexport function parseCallbackParams(\n  paramsString: string,\n  supportedParams: string[]\n) {\n  const params = extractQuerystringParameters(paramsString);\n  const [otherParams, oAuthParams] = Object.keys(params).reduce(\n    ([oParams, oauthParams], key) => {\n      if (supportedParams.includes(key)) {\n        oauthParams.set(key, params[key]);\n      } else {\n        oParams.set(key, params[key]);\n      }\n      return [oParams, oauthParams];\n    },\n    [new Map<string, string>(), new Map<string, unknown>()]\n  );\n\n  return {\n    paramsString: formatQuerystringParameters(otherParams),\n    oauthParams: fromEntries(oAuthParams.entries()),\n  };\n}\n\nexport function isKeycloakConfig(\n  config?: string | KeycloakConfig\n): config is KeycloakConfig {\n  return !!config && typeof config !== 'string';\n}\n"]}