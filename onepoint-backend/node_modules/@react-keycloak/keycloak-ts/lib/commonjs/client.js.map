{"version":3,"sources":["client.ts"],"names":["KeycloakClient","constructor","clientConfig","createLogger","console","info","warn","init","initOptions","authenticated","adapter","Error","callbackStorage","createCallbackStorage","useNonce","onLoad","loginRequired","responseMode","flow","responseType","timeSkew","redirectUri","pkceMethod","enableLogging","loadConfig","processInit","onReady","login","options","logout","register","accountManagement","createLoginUrl","state","nonce","scope","scopeOption","redirectUriOption","prompt","action","maxAge","loginHint","idpHint","locale","rest","codeVerifier","pkceChallenge","callbackState","pkceCodeVerifier","undefined","indexOf","baseUrl","endpoints","authorize","params","Map","set","clientId","add","Object","keys","forEach","key","createLogoutUrl","createRegisterUrl","createAccountUrl","realm","authServerUrl","isTokenExpired","minValidity","tokenParsed","refreshToken","logInfo","expiresIn","exp","Math","ceil","Date","getTime","isNaN","runUpdateToken","deffered","shouldRefreshToken","resolve","tokenUrl","token","refreshQueue","push","length","timeLocal","tokenResponse","refreshTokens","error","clearToken","setToken","access_token","refresh_token","id_token","onAuthRefreshSuccess","p","pop","err","logWarn","onAuthRefreshError","reject","updateToken","Deferred","getPromise","onAuthLogout","hasRealmRole","role","realmAccess","roles","hasResourceRole","resource","resourceAccess","access","loadUserProfile","profileUrl","userProfileRes","fetchUserProfile","profile","loadUserInfo","userInfoUrl","userinfo","userInfoRes","fetchUserInfo","userInfo","processCallback","oauth","kc_action_status","onActionUpdate","code","onAuthError","error_description","authSuccess","fetchTokens","oauthObj","fulfillPromise","storedNonce","refreshTokenParsed","idTokenParsed","onAuthSuccess","parseCallback","url","oauthParsed","parseCallbackUrl","oauthState","get","valid","idToken","doLogin","tokenTimeoutHandle","clearTimeout","subject","sub","realm_access","resource_access","floor","iat","onTokenExpired","round","setTimeout","fn","apply","Array","prototype","slice","call","arguments","config","configUrl","configJSON","fetchKeycloakConfigJSON","oidcProvider","oidcProviderConfigUrl","charAt","oidcProviderConfig","fetchOIDCProviderConfigJSON","oidcConfiguration","supportedParams","queryIndex","fragmentIndex","newUrl","parsed","substring","paramsString","oauthParams"],"mappings":"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","sourcesContent":["import type {\n  CallbackState,\n  CallbackStorage,\n  KeycloakAdapter,\n  KeycloakConfig,\n  KeycloakEndpoints,\n  KeycloakError,\n  KeycloakFlow,\n  KeycloakInitOptions,\n  KeycloakInstance,\n  KeycloakLoginOptions,\n  KeycloakLogoutOptions,\n  KeycloakPkceMethod,\n  KeycloakProfile,\n  KeycloakRegisterOptions,\n  KeycloakResourceAccess,\n  KeycloakResponseMode,\n  KeycloakResponseType,\n  KeycloakRoles,\n  KeycloakTokenParsed,\n  OAuthResponse,\n} from './types';\n\nimport Deferred from './utils/deferred';\n\nimport {\n  decodeToken,\n  getRealmUrl,\n  isKeycloakConfig,\n  setupOidcEndoints,\n  parseCallbackParams,\n} from './utils/keycloak';\n\nimport { formatQuerystringParameters } from './utils/url';\n\nimport {\n  createUUID,\n  generateCodeVerifier,\n  generatePkceChallenge,\n} from './utils/uuid';\n\n/**\n * A client for the Keycloak authentication server.\n * @see {@link https://keycloak.gitbooks.io/securing-client-applications-guide/content/topics/oidc/javascript-adapter.html|Keycloak JS adapter documentation}\n */\nexport class KeycloakClient implements KeycloakInstance {\n  authenticated?: boolean;\n\n  subject?: string;\n\n  responseMode?: KeycloakResponseMode;\n\n  responseType?: KeycloakResponseType;\n\n  flow?: KeycloakFlow;\n\n  realmAccess?: KeycloakRoles;\n\n  resourceAccess?: KeycloakResourceAccess;\n\n  token?: string;\n\n  tokenParsed?: KeycloakTokenParsed;\n\n  refreshToken?: string;\n\n  refreshTokenParsed?: KeycloakTokenParsed;\n\n  idToken?: string;\n\n  idTokenParsed?: KeycloakTokenParsed;\n\n  timeSkew?: number;\n\n  loginRequired?: boolean;\n\n  authServerUrl?: string;\n\n  realm?: string;\n\n  clientId?: string;\n\n  redirectUri?: string;\n\n  profile?: KeycloakProfile;\n\n  userInfo?: unknown; // KeycloakUserInfo;\n\n  enableLogging?: boolean;\n\n  tokenTimeoutHandle?: NodeJS.Timeout | null;\n\n  endpoints?: KeycloakEndpoints;\n\n  clientConfig: KeycloakConfig;\n\n  private adapter?: KeycloakAdapter;\n\n  private callbackStorage?: CallbackStorage;\n\n  private logInfo = this.createLogger(console.info);\n\n  private logWarn = this.createLogger(console.warn);\n\n  private refreshQueue: Array<Deferred<boolean>> = [];\n\n  private useNonce?: boolean;\n\n  private pkceMethod?: KeycloakPkceMethod;\n\n  constructor(clientConfig: KeycloakConfig) {\n    this.clientConfig = clientConfig;\n  }\n\n  /**\n   * Called to initialize the adapter.\n   * @param initOptions Initialization options.\n   * @returns A promise to set functions to be invoked on success or error.\n   */\n  public async init(initOptions: KeycloakInitOptions): Promise<boolean> {\n    this.authenticated = false;\n\n    if (!initOptions.adapter) {\n      throw new Error('Missing Keycloak adapter from initOptions');\n    }\n\n    this.adapter = new initOptions.adapter(\n      this,\n      this.clientConfig,\n      initOptions\n    );\n\n    this.callbackStorage = this.adapter.createCallbackStorage();\n\n    if (initOptions) {\n      if (typeof initOptions.useNonce !== 'undefined') {\n        this.useNonce = initOptions.useNonce;\n      }\n\n      if (initOptions.onLoad === 'login-required') {\n        this.loginRequired = true;\n      }\n\n      if (initOptions.responseMode) {\n        if (\n          initOptions.responseMode === 'query' ||\n          initOptions.responseMode === 'fragment'\n        ) {\n          this.responseMode = initOptions.responseMode;\n        } else {\n          throw new Error('Invalid value for responseMode');\n        }\n      }\n\n      if (initOptions.flow) {\n        switch (initOptions.flow) {\n          case 'standard':\n            this.responseType = 'code';\n            break;\n\n          case 'implicit':\n            this.responseType = 'id_token token';\n            break;\n\n          case 'hybrid':\n            this.responseType = 'code id_token token';\n            break;\n\n          default:\n            throw new Error('Invalid value for flow');\n        }\n\n        this.flow = initOptions.flow;\n      }\n\n      if (initOptions.timeSkew != null) {\n        this.timeSkew = initOptions.timeSkew;\n      }\n\n      if (initOptions.redirectUri) {\n        this.redirectUri = initOptions.redirectUri;\n      }\n\n      if (initOptions.pkceMethod) {\n        if (initOptions.pkceMethod !== 'S256') {\n          throw new Error('Invalid value for pkceMethod');\n        }\n        this.pkceMethod = initOptions.pkceMethod;\n      }\n\n      if (typeof initOptions.enableLogging === 'boolean') {\n        this.enableLogging = initOptions.enableLogging;\n      } else {\n        this.enableLogging = false;\n      }\n    }\n\n    if (!this.responseMode) {\n      this.responseMode = 'fragment';\n    }\n\n    if (!this.responseType) {\n      this.responseType = 'code';\n      this.flow = 'standard';\n    }\n\n    await this.loadConfig(this.clientConfig);\n\n    // await check3pCookiesSupported(); // Not supported on RN\n\n    await this.processInit(initOptions);\n\n    // Notify onReady event handler if set\n    this.onReady && this.onReady(this.authenticated);\n\n    // Return authentication status\n    return this.authenticated;\n  }\n\n  /**\n   * Redirects to login form.\n   * @param options Login options.\n   */\n  public async login(options?: KeycloakLoginOptions): Promise<void> {\n    return this.adapter!.login(options);\n  }\n\n  /**\n   * Redirects to logout.\n   * @param options Logout options.\n   */\n  public async logout(options?: KeycloakLogoutOptions): Promise<void> {\n    return this.adapter!.logout(options);\n  }\n\n  /**\n   * Redirects to registration form.\n   * @param options The options used for the registration.\n   */\n  public async register(options?: KeycloakRegisterOptions): Promise<void> {\n    return this.adapter!.register(options);\n  }\n\n  /**\n   * Redirects to the Account Management Console.\n   */\n  public async accountManagement(): Promise<void> {\n    return this.adapter!.accountManagement();\n  }\n\n  /**\n   * Returns the URL to login form.\n   * @param options Supports same options as Keycloak#login.\n   */\n  public createLoginUrl(options?: KeycloakLoginOptions): string {\n    const state = createUUID();\n    const nonce = createUUID();\n\n    const redirectUri = this.adapter!.redirectUri(options);\n    const {\n      scope: scopeOption,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      redirectUri: redirectUriOption,\n      prompt,\n      action,\n      maxAge,\n      loginHint,\n      idpHint,\n      locale,\n      ...rest\n    } = options ?? {};\n\n    let codeVerifier;\n    let pkceChallenge;\n    if (this.pkceMethod) {\n      codeVerifier = generateCodeVerifier(96);\n      pkceChallenge = generatePkceChallenge(this.pkceMethod, codeVerifier);\n    }\n\n    const callbackState: CallbackState = {\n      state,\n      nonce,\n      pkceCodeVerifier: codeVerifier,\n      prompt: options?.prompt ?? undefined,\n      redirectUri,\n    };\n\n    let scope;\n    if (scopeOption) {\n      if (scopeOption.indexOf('openid') !== -1) {\n        scope = scopeOption;\n      } else {\n        scope = 'openid ' + scopeOption;\n      }\n    } else {\n      scope = 'openid';\n    }\n\n    const baseUrl =\n      action === 'register'\n        ? this.endpoints!.register()\n        : this.endpoints!.authorize();\n\n    const params = new Map<string, string>();\n    params.set('client_id', this.clientId!);\n    params.set('redirect_uri', redirectUri);\n    params.set('state', state);\n    params.set('response_mode', this.responseMode!);\n    params.set('response_type', this.responseType!);\n    params.set('scope', scope);\n\n    if (this.useNonce) {\n      params.set('nonce', nonce);\n    }\n\n    if (prompt) {\n      params.set('prompt', prompt);\n    }\n\n    if (maxAge) {\n      params.set('max_age', `${maxAge}`);\n    }\n\n    if (loginHint) {\n      params.set('login_hint', loginHint);\n    }\n\n    if (idpHint) {\n      params.set('kc_idp_hint', idpHint);\n    }\n\n    if (action && action !== 'register') {\n      params.set('kc_action', action);\n    }\n\n    if (locale) {\n      params.set('ui_locales', locale);\n    }\n\n    if (this?.pkceMethod && !!pkceChallenge) {\n      params.set('code_challenge', pkceChallenge);\n      params.set('code_challenge_method', this.pkceMethod);\n    }\n\n    this.callbackStorage!.add(callbackState);\n\n    Object.keys(rest).forEach(key => {\n      params.set(key, `${rest[key]}`);\n    });\n\n    return `${baseUrl}?${formatQuerystringParameters(params)}`;\n  }\n\n  /**\n   * Returns the URL to logout the user.\n   * @param options Logout options.\n   */\n  public createLogoutUrl(options?: KeycloakLogoutOptions): string {\n    const params = new Map<string, string>();\n    params.set('redirect_uri', this.adapter!.redirectUri(options));\n\n    return `${this.endpoints!.logout()}?${formatQuerystringParameters(params)}`;\n  }\n\n  /**\n   * Returns the URL to registration page.\n   * @param options The options used for creating the registration URL.\n   */\n  public createRegisterUrl(options: KeycloakRegisterOptions = {}): string {\n    return this.createLoginUrl({\n      ...options,\n      action: 'register',\n    });\n  }\n\n  /**\n   * Returns the URL to the Account Management Console.\n   */\n  public createAccountUrl(): string {\n    const realm = getRealmUrl(this.realm!, this.authServerUrl);\n    if (typeof realm === 'undefined') {\n      throw new Error('Failed to create Account URL. realm is not defined.');\n    }\n\n    const params = new Map<string, string>();\n    params.set('referrer', this.clientId!);\n    params.set('referrer_uri', this.adapter!.redirectUri());\n\n    return `${realm}/account?${formatQuerystringParameters(params)}`;\n  }\n\n  /**\n   * Returns true if the token has less than `minValidity` seconds left before\n   * it expires.\n   * @param minValidity If not specified, `0` is used.\n   */\n  public isTokenExpired(minValidity?: number): boolean {\n    if (!this.tokenParsed || (!this.refreshToken && this.flow !== 'implicit')) {\n      throw 'Not authenticated';\n    }\n\n    if (this.timeSkew == null) {\n      this.logInfo(\n        '[KEYCLOAK] Unable to determine if token is expired as timeskew is not set'\n      );\n      return true;\n    }\n\n    let expiresIn =\n      (this.tokenParsed?.exp ?? 0) -\n      Math.ceil(new Date().getTime() / 1000) +\n      this.timeSkew;\n\n    if (minValidity) {\n      if (isNaN(minValidity)) {\n        throw 'Invalid minValidity';\n      }\n\n      expiresIn -= minValidity;\n    }\n\n    return expiresIn < 0;\n  }\n\n  private async runUpdateToken(\n    minValidity: number,\n    deffered: Deferred<boolean>\n  ) {\n    let shouldRefreshToken: boolean = false;\n\n    if (minValidity === -1) {\n      shouldRefreshToken = true;\n      this.logInfo('[KEYCLOAK] Refreshing token: forced refresh');\n    } else if (!this.tokenParsed || this.isTokenExpired(minValidity)) {\n      shouldRefreshToken = true;\n      this.logInfo('[KEYCLOAK] Refreshing token: token expired');\n    }\n\n    if (!shouldRefreshToken) {\n      deffered.resolve(false);\n    } else {\n      const tokenUrl = this.endpoints!.token();\n\n      const params = new Map<string, string>();\n      params.set('client_id', this.clientId!);\n      params.set('grant_type', 'refresh_token');\n      params.set('refresh_token', this.refreshToken!);\n\n      this.refreshQueue.push(deffered);\n\n      if (this.refreshQueue.length === 1) {\n        let timeLocal = new Date().getTime();\n\n        try {\n          const tokenResponse = await this.adapter!.refreshTokens(\n            tokenUrl,\n            formatQuerystringParameters(params)\n          );\n\n          if (tokenResponse.error) {\n            this.clearToken();\n            throw new Error(tokenResponse.error);\n          } else {\n            this.logInfo('[KEYCLOAK] Token refreshed');\n\n            timeLocal = (timeLocal + new Date().getTime()) / 2;\n\n            this.setToken(\n              tokenResponse.access_token,\n              tokenResponse.refresh_token,\n              tokenResponse.id_token,\n              timeLocal\n            );\n\n            // Notify onAuthRefreshSuccess event handler if set\n            this.onAuthRefreshSuccess && this.onAuthRefreshSuccess();\n\n            for (\n              let p = this.refreshQueue.pop();\n              p != null;\n              p = this.refreshQueue.pop()\n            ) {\n              p.resolve(true);\n            }\n          }\n        } catch (err) {\n          this.logWarn('[KEYCLOAK] Failed to refresh token');\n\n          // Notify onAuthRefreshError event handler if set\n          this.onAuthRefreshError && this.onAuthRefreshError();\n\n          for (\n            let p = this.refreshQueue.pop();\n            p != null;\n            p = this.refreshQueue.pop()\n          ) {\n            p.reject(true);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If the token expires within `minValidity` seconds, the token is refreshed.\n   * If the session status iframe is enabled, the session status is also\n   * checked.\n   * @returns A promise to set functions that can be invoked if the token is\n   *          still valid, or if the token is no longer valid.\n   * @example\n   * ```js\n   * keycloak.updateToken(5).then(function(refreshed) {\n   *   if (refreshed) {\n   *     alert('Token was successfully refreshed');\n   *   } else {\n   *     alert('Token is still valid');\n   *   }\n   * }).catch(function() {\n   *   alert('Failed to refresh the token, or the session has expired');\n   * });\n   */\n  public async updateToken(minValidity: number = 5): Promise<boolean> {\n    const deffered = new Deferred<boolean>();\n\n    if (!this.refreshToken) {\n      deffered.reject('missing refreshToken');\n      return deffered.getPromise();\n    }\n\n    this.runUpdateToken(minValidity, deffered);\n\n    return deffered.getPromise();\n  }\n\n  /**\n   * Clears authentication state, including tokens. This can be useful if\n   * the application has detected the session was expired, for example if\n   * updating token fails. Invoking this results in Keycloak#onAuthLogout\n   * callback listener being invoked.\n   */\n  public clearToken(): void {\n    if (this.token) {\n      this.setToken(null, null, null);\n\n      // Notify onAuthLogout event handler if set\n      this.onAuthLogout && this.onAuthLogout();\n\n      if (this.loginRequired) {\n        this.login();\n      }\n    }\n  }\n\n  /**\n   * Returns true if the token has the given realm role.\n   * @param role A realm role name.\n   */\n  public hasRealmRole(role: string): boolean {\n    return !!this.realmAccess && this.realmAccess.roles?.indexOf(role) >= 0;\n  }\n\n  /**\n   * Returns true if the token has the given role for the resource.\n   * @param role A role name.\n   * @param resource If not specified, `clientId` is used.\n   */\n  public hasResourceRole(role: string, resource?: string): boolean {\n    if (!this.resourceAccess) {\n      return false;\n    }\n\n    const access = this.resourceAccess[resource || this.clientId || ''];\n    return !!access && access.roles.indexOf(role) >= 0;\n  }\n\n  /**\n   * Loads the user's profile.\n   *\n   * @returns The current user KeycloakProfile.\n   */\n  async loadUserProfile(): Promise<KeycloakProfile> {\n    const profileUrl =\n      getRealmUrl(this.realm!, this.authServerUrl) + '/account';\n\n    const userProfileRes = await this.adapter!.fetchUserProfile(\n      profileUrl,\n      this.token!\n    );\n\n    this.profile = userProfileRes;\n    return this.profile;\n  }\n\n  /**\n   * @private Undocumented.\n   */\n  async loadUserInfo(): Promise<unknown> {\n    const userInfoUrl = this.endpoints!.userinfo();\n\n    const userInfoRes = await this.adapter!.fetchUserInfo(\n      userInfoUrl,\n      this.token!\n    );\n\n    this.userInfo = userInfoRes;\n    return this.userInfo;\n  }\n\n  /**\n   * Called when the adapter is initialized.\n   */\n  onReady?(authenticated?: boolean): void;\n\n  /**\n   * Called when a user is successfully authenticated.\n   */\n  onAuthSuccess?(): void;\n\n  /**\n   * Called if there was an error during authentication.\n   */\n  onAuthError?(errorData: KeycloakError): void;\n\n  /**\n   * Called when the token is refreshed.\n   */\n  onAuthRefreshSuccess?(): void;\n\n  /**\n   * Called if there was an error while trying to refresh the token.\n   */\n  onAuthRefreshError?(): void;\n\n  /**\n   * Called if the user is logged out (will only be called if the session\n   * status iframe is enabled, or in Cordova mode).\n   */\n  onAuthLogout?(): void;\n\n  /**\n   * Called when the access token is expired. If a refresh token is available\n   * the token can be refreshed with Keycloak#updateToken, or in cases where\n   * it's not (ie. with implicit flow) you can redirect to login screen to\n   * obtain a new access token.\n   */\n  onTokenExpired?(): void;\n\n  /**\n   * Called when a AIA has been requested by the application.\n   */\n  onActionUpdate?(status: 'success' | 'cancelled' | 'error'): void;\n\n  /**\n   * @private Undocumented.\n   */\n  async processCallback(oauth: OAuthResponse) {\n    const timeLocal = new Date().getTime();\n\n    if (oauth.kc_action_status) {\n      this.onActionUpdate && this.onActionUpdate(oauth.kc_action_status);\n    }\n\n    const { code, error, prompt } = oauth;\n\n    if (error) {\n      if (prompt !== 'none') {\n        this.onAuthError &&\n          this.onAuthError({\n            error,\n            error_description: oauth.error_description ?? 'auth error',\n          });\n\n        throw new Error(oauth.error_description);\n      }\n\n      return;\n    }\n\n    if (this.flow !== 'standard' && (oauth.access_token || oauth.id_token)) {\n      return this.authSuccess(oauth, timeLocal, true);\n    }\n\n    if (this.flow !== 'implicit' && code) {\n      const params = new Map<string, string>();\n      params.set('code', code);\n      params.set('grant_type', 'authorization_code');\n      params.set('client_id', this.clientId!);\n      params.set('redirect_uri', oauth.redirectUri!);\n\n      if (oauth.pkceCodeVerifier) {\n        params.set('code_verifier', oauth.pkceCodeVerifier);\n      }\n\n      const tokenUrl = this.endpoints!.token();\n      try {\n        const tokenResponse = await this.adapter!.fetchTokens(\n          tokenUrl,\n          formatQuerystringParameters(params)\n        );\n\n        await this.authSuccess(\n          {\n            ...oauth,\n            access_token: tokenResponse.access_token || undefined,\n            refresh_token: tokenResponse.refresh_token || undefined,\n            id_token: tokenResponse.id_token || undefined,\n          },\n          timeLocal,\n          this.flow === 'standard'\n        );\n      } catch (err) {\n        // Notify onAuthError event handler if set\n        this.onAuthError &&\n          this.onAuthError({\n            error: err,\n            error_description:\n              'Failed to refresh token during callback processing',\n          });\n\n        throw new Error(err);\n      }\n    }\n  }\n\n  private async authSuccess(\n    oauthObj: OAuthResponse,\n    timeLocal: number,\n    fulfillPromise: boolean\n  ) {\n    timeLocal = (timeLocal + new Date().getTime()) / 2;\n\n    this.setToken(\n      oauthObj.access_token ?? null,\n      oauthObj.refresh_token ?? null,\n      oauthObj.id_token ?? null,\n      timeLocal\n    );\n\n    if (\n      this.useNonce &&\n      ((this.tokenParsed && this.tokenParsed.nonce !== oauthObj.storedNonce) ||\n        (this.refreshTokenParsed &&\n          this.refreshTokenParsed.nonce !== oauthObj.storedNonce) ||\n        (this.idTokenParsed &&\n          this.idTokenParsed.nonce !== oauthObj.storedNonce))\n    ) {\n      this.logInfo('[KEYCLOAK] Invalid nonce, clearing token');\n      this.clearToken();\n\n      throw new Error('invalid nonce, token cleared');\n    }\n\n    if (fulfillPromise) {\n      this.onAuthSuccess && this.onAuthSuccess();\n    }\n  }\n\n  /**\n   * @private Undocumented.\n   */\n  parseCallback(url: string): OAuthResponse {\n    const oauthParsed = this.parseCallbackUrl(url);\n    if (!oauthParsed) {\n      throw new Error('Failed to parse redirect URL');\n    }\n\n    const oauthState = this.callbackStorage!.get(oauthParsed.state as string);\n\n    if (oauthState) {\n      return {\n        ...oauthParsed,\n        valid: true,\n        redirectUri: oauthState.redirectUri,\n        storedNonce: oauthState.nonce,\n        prompt: oauthState.prompt,\n        pkceCodeVerifier: oauthState.pkceCodeVerifier,\n      };\n    }\n\n    return oauthParsed as OAuthResponse;\n  }\n\n  private async processInit(initOptions?: KeycloakInitOptions): Promise<void> {\n    if (initOptions) {\n      if (initOptions.token && initOptions.refreshToken) {\n        this.setToken(\n          initOptions.token,\n          initOptions.refreshToken,\n          initOptions.idToken ?? null\n        );\n\n        try {\n          await this.updateToken(-1);\n\n          // Notify onAuthSuccess event handler if set\n          this.onAuthSuccess && this.onAuthSuccess();\n        } catch (error) {\n          // Notify onAuthError event handler if set\n          this.onAuthError &&\n            this.onAuthError({\n              error,\n              error_description: 'Failed to refresh token during init',\n            });\n\n          if (initOptions.onLoad) {\n            this.onLoad(initOptions);\n          } else {\n            throw new Error('Failed to init');\n          }\n        }\n        // }\n      } else if (initOptions.onLoad) {\n        this.onLoad(initOptions);\n      }\n    }\n  }\n\n  private async onLoad(initOptions: KeycloakInitOptions): Promise<void> {\n    switch (initOptions.onLoad) {\n      case 'login-required':\n        this.doLogin(initOptions, true);\n        break;\n\n      case 'check-sso':\n        break;\n\n      default:\n        throw new Error('Invalid value for onLoad');\n    }\n  }\n\n  private async doLogin(\n    initOptions: KeycloakInitOptions,\n    prompt?: boolean\n  ): Promise<void> {\n    return this.login({\n      ...initOptions,\n      prompt: !prompt ? 'none' : undefined,\n    });\n  }\n\n  private setToken(\n    token: string | null,\n    refreshToken: string | null,\n    idToken: string | null,\n    timeLocal?: number\n  ) {\n    if (this.tokenTimeoutHandle) {\n      clearTimeout(this.tokenTimeoutHandle);\n      this.tokenTimeoutHandle = null;\n    }\n\n    if (refreshToken) {\n      this.refreshToken = refreshToken;\n      this.refreshTokenParsed = decodeToken(refreshToken);\n    } else {\n      delete this.refreshToken;\n      delete this.refreshTokenParsed;\n    }\n\n    if (idToken) {\n      this.idToken = idToken;\n      this.idTokenParsed = decodeToken(idToken);\n    } else {\n      delete this.idToken;\n      delete this.idTokenParsed;\n    }\n\n    if (token) {\n      this.token = token;\n      this.tokenParsed = decodeToken(token);\n      if (!this.tokenParsed) {\n        throw new Error('Invalid tokenParsed');\n      }\n\n      this.authenticated = true;\n      this.subject = this.tokenParsed.sub;\n      this.realmAccess = this.tokenParsed.realm_access;\n      this.resourceAccess = this.tokenParsed.resource_access;\n\n      if (timeLocal) {\n        this.timeSkew =\n          Math.floor(timeLocal / 1000) - (this.tokenParsed.iat ?? 0);\n      }\n\n      if (this.timeSkew != null) {\n        this.logInfo(\n          `[KEYCLOAK] Estimated time difference between browser and server is ${this.timeSkew} seconds`\n        );\n\n        if (this.onTokenExpired) {\n          const expiresIn =\n            ((this.tokenParsed.exp ?? 0) -\n              new Date().getTime() / 1000 +\n              this.timeSkew) *\n            1000;\n\n          this.logInfo(\n            `[KEYCLOAK] Token expires in ${Math.round(expiresIn / 1000)} s`\n          );\n\n          if (expiresIn <= 0) {\n            this.onTokenExpired();\n          } else {\n            this.tokenTimeoutHandle = setTimeout(\n              this.onTokenExpired,\n              expiresIn\n            );\n          }\n        }\n      }\n    } else {\n      delete this.token;\n      delete this.tokenParsed;\n      delete this.subject;\n      delete this.realmAccess;\n      delete this.resourceAccess;\n\n      this.authenticated = false;\n    }\n  }\n\n  private createLogger(fn: (...optionalParams: unknown[]) => void): Function {\n    return () => {\n      if (this.enableLogging) {\n        fn.apply(console, Array.prototype.slice.call(arguments));\n      }\n    };\n  }\n\n  private async loadConfig(config?: KeycloakConfig | string): Promise<void> {\n    let configUrl;\n    if (!config) {\n      configUrl = 'keycloak.json';\n    } else if (typeof config === 'string') {\n      configUrl = config;\n    }\n\n    if (configUrl) {\n      const configJSON = await this.adapter!.fetchKeycloakConfigJSON(configUrl);\n\n      this.realm = configJSON.realm;\n      this.clientId = configJSON.resource;\n\n      this.endpoints = setupOidcEndoints({\n        realm: this.realm,\n        authServerUrl: this.authServerUrl,\n      });\n\n      return;\n    }\n\n    if (!isKeycloakConfig(config)) {\n      throw new Error('invalid configuration format');\n    }\n\n    if (!config.clientId) {\n      throw new Error('clientId missing from configuration');\n    }\n\n    this.clientId = config.clientId;\n\n    const oidcProvider = config.oidcProvider;\n    // When oidcProvider config is not supplied, use local configuration params\n    if (!oidcProvider) {\n      if (!config.realm) {\n        throw new Error('realm missing from configuration');\n      }\n\n      this.realm = config.realm;\n      this.authServerUrl = config.url;\n\n      this.endpoints = setupOidcEndoints({\n        realm: this.realm,\n        authServerUrl: this.authServerUrl,\n      });\n\n      return;\n    }\n\n    // When oidcProvider config is a string, load the config from the URL\n    if (typeof oidcProvider === 'string') {\n      let oidcProviderConfigUrl;\n      if (oidcProvider.charAt(oidcProvider.length - 1) === '/') {\n        oidcProviderConfigUrl =\n          oidcProvider + '.well-known/openid-configuration';\n      } else {\n        oidcProviderConfigUrl =\n          oidcProvider + '/.well-known/openid-configuration';\n      }\n\n      try {\n        const oidcProviderConfig =\n          await this.adapter!.fetchOIDCProviderConfigJSON(\n            oidcProviderConfigUrl\n          );\n\n        this.endpoints = setupOidcEndoints({\n          oidcConfiguration: oidcProviderConfig,\n        });\n\n        return;\n      } catch (err) {\n        throw err;\n      }\n    }\n\n    // Otherwise oidcProvider is a config object and should be used\n    this.endpoints = setupOidcEndoints({\n      oidcConfiguration: oidcProvider,\n    });\n  }\n\n  private parseCallbackUrl(url: string) {\n    let supportedParams: string[] = [];\n    switch (this.flow) {\n      case 'standard':\n        supportedParams = [\n          'code',\n          'state',\n          'session_state',\n          'kc_action_status',\n        ];\n        break;\n\n      case 'implicit':\n        supportedParams = [\n          'access_token',\n          'token_type',\n          'id_token',\n          'state',\n          'session_state',\n          'expires_in',\n          'kc_action_status',\n        ];\n        break;\n\n      case 'hybrid':\n        supportedParams = [\n          'access_token',\n          'id_token',\n          'code',\n          'state',\n          'session_state',\n          'kc_action_status',\n        ];\n        break;\n    }\n\n    supportedParams.push('error');\n    supportedParams.push('error_description');\n    supportedParams.push('error_uri');\n\n    const queryIndex = url.indexOf('?');\n    const fragmentIndex = url.indexOf('#');\n\n    let newUrl: string;\n    let parsed;\n\n    if (this.responseMode === 'query' && queryIndex !== -1) {\n      newUrl = url.substring(0, queryIndex);\n      parsed = parseCallbackParams(\n        url.substring(\n          queryIndex + 1,\n          fragmentIndex !== -1 ? fragmentIndex : url.length\n        ),\n        supportedParams\n      );\n      if (parsed.paramsString !== '') {\n        newUrl += '?' + parsed.paramsString;\n      }\n      if (fragmentIndex !== -1) {\n        newUrl += url.substring(fragmentIndex);\n      }\n    } else if (this.responseMode === 'fragment' && fragmentIndex !== -1) {\n      newUrl = url.substring(0, fragmentIndex);\n      parsed = parseCallbackParams(\n        url.substring(fragmentIndex + 1),\n        supportedParams\n      );\n      if (parsed.paramsString !== '') {\n        newUrl += '#' + parsed.paramsString;\n      }\n    }\n\n    if (parsed && parsed.oauthParams) {\n      if (this.flow === 'standard' || this.flow === 'hybrid') {\n        if (\n          (parsed.oauthParams.code || parsed.oauthParams.error) &&\n          parsed.oauthParams.state\n        ) {\n          parsed.oauthParams.newUrl = newUrl!;\n          return parsed.oauthParams;\n        }\n      } else if (this.flow === 'implicit') {\n        if (\n          (parsed.oauthParams.access_token || parsed.oauthParams.error) &&\n          parsed.oauthParams.state\n        ) {\n          parsed.oauthParams.newUrl = newUrl!;\n          return parsed.oauthParams;\n        }\n      }\n    }\n\n    return {};\n  }\n}\n"]}